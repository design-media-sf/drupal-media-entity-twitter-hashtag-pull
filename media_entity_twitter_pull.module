<?php

/**
 * @file
 * Creates new Twitter media entities from Twitter when there are new Tweets.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\media\MediaInterface;
use Drupal\media\MediaTypeInterface;

/**
 * Implements hook_help().
 */
function media_entity_twitter_pull_help($route_name) {
  switch ($route_name) {
    case 'help.page.media_entity_twitter_pull':
      return '<p>' . t('The Media entity Twitter: Automatic Pull module can be used to automatically fetch tweets from Twitter for configured Twitter accounts and create Twitter media entities from them. This module will check each media entity type that uses the Twitter source from <a href=":media_entity_twitter">Media entity Twitter</a> and has <em>Usernames</em> configured for it. To configure fetching options for a media type, look on its edit form for the <em>Automatic Pull</em> form section.', [':media_entity_twitter' => 'https://www.drupal.org/project/media_entity_twitter']) . '</p>';
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert() for media.
 */
function media_entity_twitter_pull_media_insert(MediaInterface $entity) {
  if (!empty($entity->bundle->entity->getThirdPartySetting('media_entity_twitter_pull', 'usernames'))) {
    $state_key = "media_entity_twitter_pull.{$entity->bundle()}";
    $newest_id = \Drupal::state()->get($state_key, 1);

    $id = (int) $entity->getSource()->getMetadata($entity, 'id');
    if ($newest_id < $id) {
      \Drupal::state()->set($state_key, $id);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update() for media.
 */
function media_entity_twitter_pull_media_update(MediaInterface $entity) {
  if (!empty($entity->bundle->entity->getThirdPartySetting('media_entity_twitter_pull', 'usernames'))) {
    $state_key = "media_entity_twitter_pull.{$entity->bundle()}";
    $newest_id = \Drupal::state()->get($state_key, 1);

    $id = (int) $entity->getSource()->getMetadata($entity, 'id');
    if ($newest_id < $id) {
      \Drupal::state()->set($state_key, $id);
    }
    else {
      $original_id = (int) $entity->original->getSource()->getMetadata($entity, 'id');
      // If this media entity was the newest one but now its source tweet has
      // been changed, recalculate the newest entity.
      if ($original_id != $id && $newest_id == $original_id) {
        $newest_id = 1;

        $remaining = \Drupal::entityTypeManager()
          ->getStorage('media')
          ->loadByProperties(['bundle' => $entity->bundle()]);
        foreach ($remaining as $media) {
          $id = $media->getSource()->getMetadata($entity, 'id');
          if ($newest_id < $id) {
            $newest_id = $id;
          }
        }

        \Drupal::state()->set($state_key, $newest_id);
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete() for media.
 */
function media_entity_twitter_pull_media_delete(MediaInterface $entity) {
  if (!empty($entity->bundle->entity->getThirdPartySetting('media_entity_twitter_pull', 'usernames'))) {
    $bundle    = $entity->bundle();
    $newest_id = 1;

    // Find the highest ID from the remaining media entities in the same bundle.
    $remaining = \Drupal::entityTypeManager()
      ->getStorage('media')
      ->loadByProperties(['bundle' => $bundle]);
    foreach ($remaining as $media) {
      $id = $media->getSource()->getMetadata($media, 'id');
      if ($newest_id < $id) {
        $newest_id = $id;
      }
    }

    \Drupal::state()->set("media_entity_twitter_pull.$bundle", $newest_id);
  }
}

/**
 * Implements hook_media_type_delete().
 */
function media_entity_twitter_pull_media_type_delete(MediaTypeInterface $entity) {
  \Drupal::state()->delete("media_entity_twitter_pull.{$entity->id()}");
}

/**
 * Implements hook_cron().
 */
function media_entity_twitter_pull_cron() {
  $queue = \Drupal::queue('media_entity_twitter_pull_fetch');

  /** @var \Drupal\media\MediaTypeInterface[] $bundles */
  $bundles = \Drupal::entityTypeManager()
    ->getStorage('media_type')
    ->loadByProperties(['source' => 'twitter']);
  foreach ($bundles as $bundle) {
    if (
      !empty($bundle->getThirdPartySetting('media_entity_twitter_pull', 'usernames'))
      && $bundle->getSource()->getConfiguration()['use_twitter_api']
    ) {
      $queue->createItem($bundle);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for media_type_edit_form.
 */
function media_entity_twitter_pull_form_media_type_edit_form_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\media\MediaTypeInterface $bundle */
  $bundle = $form_state->getFormObject()->getEntity();

  if ($bundle->getSource()->getPluginId() == 'twitter') {
    $settings = $bundle->getThirdPartySettings('media_entity_twitter_pull');
    $settings += ['usernames' => [], 'count' => NULL];

    $form['media_entity_twitter_pull'] = [
      '#type' => 'details',
      '#tree' => TRUE,
      '#title' => t('Automatic Pull'),
      '#description' => t('Automatically fetch new tweets from Twitter via cron. <em>Usernames</em> option must not be empty for this to happen.'),
      '#group' => 'additional_settings',
      'usernames' => [
        '#type' => 'textfield',
        '#title' => t('Usernames'),
        '#description' => t('Fetch tweets from these user accounts, separated by comma. Do not add the @ symbol.'),
        '#default_value' => implode(', ', $settings['usernames']),
      ],
      'count' => [
        '#type' => 'number',
        '#title' => t('Count'),
        '#description' => t('Set how many tweets to fetch per Twitter user per cron run. Twitter API limits to maximum of 200.'),
        '#default_value' => $settings['count'],
        '#step' => 1,
        '#min' => 1,
        '#max' => 200,
      ],
    ];
    $form['#entity_builders'][] = 'media_entity_twitter_pull_media_builder';
  }
}

/**
 * Entity form builder to add automatic pull settings to a media type.
 */
function media_entity_twitter_pull_media_builder($entity_type, MediaTypeInterface $entity, &$form, FormStateInterface $form_state) {
  $settings = $form_state->getValue('media_entity_twitter_pull');
  $usernames = array_filter(preg_split('/\W+/', $settings['usernames']));

  if (!empty($usernames)) {
    $entity
      ->setThirdPartySetting('media_entity_twitter_pull', 'usernames', $usernames)
      ->setThirdPartySetting('media_entity_twitter_pull', 'count', $settings['count']);
  }
  else {
    $entity
      ->unsetThirdPartySetting('media_entity_twitter_pull', 'usernames')
      ->unsetThirdPartySetting('media_entity_twitter_pull', 'count');
  }
}
